<?xml version="1.0" encoding="UTF-8"?><unload unload_date="2019-04-11 14:35:11">
<sys_remote_update_set action="INSERT_OR_UPDATE">
<application display_value="Global">global</application>
<application_name>Global</application_name>
<application_scope>global</application_scope>
<application_version/>
<collisions/>
<commit_date/>
<deleted/>
<description/>
<inserted/>
<name>Initial Update Set 2018-04-09</name>
<origin_sys_id/>
<parent display_value=""/>
<release_date>2019-04-11 14:33:49</release_date>
<remote_base_update_set display_value=""/>
<remote_parent_id/>
<remote_sys_id>5f5d04980f7c3300d12eba8ce1050e75</remote_sys_id>
<state>loaded</state>
<summary/>
<sys_class_name>sys_remote_update_set</sys_class_name>
<sys_created_by>erwinel_da</sys_created_by>
<sys_created_on>2019-04-11 14:35:10</sys_created_on>
<sys_id>90dcb57c0ff8b300d12eba8ce1050ea0</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_updated_by>erwinel_da</sys_updated_by>
<sys_updated_on>2019-04-11 14:35:10</sys_updated_on>
<update_set display_value=""/>
<update_source display_value=""/>
<updated/>
</sys_remote_update_set>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Global">global</application>
<category>customer</category>
<comments/>
<name>sys_script_fix_c4cf8a68dbe31300e298771ebf9619a3</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_fix"&gt;&lt;sys_script_fix action="INSERT_OR_UPDATE"&gt;&lt;active&gt;true&lt;/active&gt;&lt;before&gt;false&lt;/before&gt;&lt;description&gt;Bulk activation of plugins&lt;/description&gt;&lt;flush_cache&gt;false&lt;/flush_cache&gt;&lt;name&gt;Army Bulk Plugin Activation&lt;/name&gt;&lt;record_for_rollback&gt;false&lt;/record_for_rollback&gt;&lt;run_once&gt;true&lt;/run_once&gt;&lt;script&gt;&lt;![CDATA[// Array of IDs for plugins that should be activated.
var pluginIds = [
    "com.glide.quiz_designer",
    "com.glide.ui.list_v3",
    "com.glide.web_service_provider_v2",
    "com.glideapp.live_feed_v2",
    "com.glideapp.report_statreports",
    "com.snc.automatic_assignment",
    "com.snc.bestpractice.bulkchange",
    "com.snc.change_management.risk_assessment",
    "com.snc.extended_cmdb",
    "com.snc.field_normalization",
    "com.snc.financial_planning_pmo",
    "com.snc.iam",
    "com.snc.knowledge_document",
    "com.snc.pa.configurationgenerator",
    "com.snc.procurement",
    "com.snc.required_form_fields",
    "com.snc.sc_catalog_manager",
    "com.snc.sdlc.agile.2.0",
    "com.snc.service_portfolio.sla",
    "com.snc.sla.contract2",
    "com.snc.task_activity",
    "com.snc.treemap",
    "com.snc.undelete",
    "com.snc.vendor_performance",
    "com.snc.whtp"
];
function isQueuedPluginActivation(obj) {
    return obj.status == "waiting";
}
function isFailedPluginActivation(obj) {
    return obj.status == "failed";
}
var resultInfo = {
    items: [],
    startTime: new GlideDateTime()
};
try {
    var gpm_1 = new GlidePluginManager();
    var servletUri_1 = gs.getProperty('glide.servlet.uri');
    resultInfo.items = pluginIds.map(function (id) {
        var pluginGlideRecord = new GlideRecord("v_plugin");
        pluginGlideRecord.addQuery("id", id);
        try {
            pluginGlideRecord.query();
            if (pluginGlideRecord.next()) {
                if (gpm_1.isActive(id))
                    return {
                        id: id,
                        name: pluginGlideRecord.getValue("name"),
                        status: "activated",
                        message: "Plugin was already activated",
                        pluginLink: servletUri_1 + pluginGlideRecord.getLink(true)
                    };
                return {
                    id: id,
                    name: pluginGlideRecord.getValue("name"),
                    status: "waiting",
                    pluginLink: servletUri_1 + pluginGlideRecord.getLink(true)
                };
            }
            else
                return {
                    id: id,
                    status: "failed",
                    message: "Plugin with id of " + JSON.stringify(id) + " not found."
                };
        }
        catch (e) {
            var eType = e.name;
            eType = (typeof (eType) != "string") ? "" : eType.trim();
            if (eType.length == 0)
                eType = "error";
            gs.error(e);
            gs.warn("Unexpected " + eType + " while trying to get status of plugin with id of " + JSON.stringify(id));
            return {
                id: id,
                status: "failed",
                message: "Unexpected " + eType + " while trying to get status of plugin with id of " + JSON.stringify(id) + ": " + e,
                details: (typeof (e.stack) == "undefined" || e.stack === null) ? "" : ((typeof (e.stack) == "string") ? e.stack : e.stack + "").trim()
            };
        }
    }, gpm_1);
    var queue = resultInfo.items.filter(isQueuedPluginActivation);
    if (queue.length &gt; 0) {
        gs.info("Activating " + ((queue.length == 1) ? "1 plugin" : queue.length + " plugin"));
        resultInfo.startTime = new GlideDateTime();
        for (var index = 0; index &lt; resultInfo.items.length; index++) {
            var pluginInfo = resultInfo.items[index];
            if (!isQueuedPluginActivation(pluginInfo))
                continue;
            if (gpm_1.isActive(pluginInfo.id)) {
                resultInfo.items[index] = {
                    id: pluginInfo.id,
                    name: pluginInfo.name,
                    status: "succeeded",
                    message: "Plugin auto-activated",
                    pluginLink: pluginInfo.pluginLink
                };
                continue;
            }
            try {
                var worker = new GlidePluginManagerWorker();
                worker.setPluginId(pluginInfo.id);
                worker.setIncludeDemoData(false);
                worker.setProgressName("Activate " + ((typeof (pluginInfo.name) == "string" &amp;&amp; pluginInfo.name.trim().length &gt; 0) ? pluginInfo.name : pluginInfo.id));
                worker.setBackground(false);
                worker.start();
                var progressId = worker.getProgressID();
                var progressGlideRecord = new GlideRecord("sys_progress_worker");
                progressGlideRecord.addQuery("sys_id", progressId);
                progressGlideRecord.query();
                if (!progressGlideRecord.next())
                    throw new Error("Unable to find progress record " + progressId + " for " + ((typeof (pluginInfo.name) == "string" &amp;&amp; pluginInfo.name.trim().length &gt; 0) ? pluginInfo.name : pluginInfo.id));
                var completion_code = progressGlideRecord.getValue("state");
                gs.info("state is " + completion_code);
                if (completion_code == "complete" || completion_code == "cancelled") {
                    var c = progressGlideRecord.getValue("state_code");
                    if (!gs.nil(c) &amp;&amp; c.length &gt; 0)
                        completion_code = c;
                }
                var r = "";
                var success = false;
                switch (completion_code) {
                    case "success":
                        success = true;
                        r = "Activated plugin";
                        break;
                    case "complete":
                        success = true;
                        r = "Activation completed for plugin";
                        break;
                    case "cancelled":
                        r = "Activated cancelled for";
                        break;
                    case "error":
                        r = "Error activating plugin";
                        break;
                    default:
                        r = "Unexpected result { Code: " + completion_code + "; ProgressID: " + progressId + "} while activating plugin";
                        break;
                }
                var msg = progressGlideRecord.getValue("message");
                msg = (typeof (msg) === "string") ? msg.trim() : "";
                if (success)
                    resultInfo.items[index] = {
                        id: pluginInfo.id,
                        name: pluginInfo.name,
                        status: "succeeded",
                        completion_code: completion_code,
                        progressId: progressId,
                        message: r,
                        details: msg,
                        pluginLink: pluginInfo.pluginLink,
                        progressLink: servletUri_1 + progressGlideRecord.getLink(true)
                    };
                else {
                    var e = progressGlideRecord.getValue("error_message");
                    e = (typeof (e) === "string") ? e.trim() : "";
                    if (msg.length == 0)
                        msg = e;
                    else if (e.length &gt; 0 &amp;&amp; e != msg)
                        msg += " (" + e + ")";
                    resultInfo.items[index] = {
                        id: pluginInfo.id,
                        name: pluginInfo.name,
                        status: "failed",
                        message: r,
                        details: msg,
                        pluginLink: pluginInfo.pluginLink,
                        progressLink: servletUri_1 + progressGlideRecord.getLink(true)
                    };
                }
            }
            catch (err) {
                var eType = err.name;
                eType = (typeof (eType) != "string") ? "" : eType.trim();
                if (eType.length == 0)
                    eType = "error";
                gs.error(err);
                gs.warn("Unexpected " + eType + " while trying to activate plugin with id of " + JSON.stringify(pluginInfo.id));
                resultInfo.items[index] = {
                    id: pluginInfo.id,
                    name: pluginInfo.name,
                    status: "failed",
                    pluginLink: pluginInfo.pluginLink,
                    message: "Unexpected " + eType + " while trying to activate plugin with id of " + JSON.stringify(pluginInfo.id) + ": " + err,
                    details: (typeof (err.stack) == "undefined" || err.stack === null) ? "" : ((typeof (err.stack) == "string") ? err.stack : err.stack + "").trim()
                };
            }
        }
    }
}
catch (unhandledErr) {
    var eType = unhandledErr.name;
    eType = (typeof (eType) != "string") ? "" : eType.trim();
    if (eType.length == 0)
        eType = "error";
    gs.error(unhandledErr);
    gs.warn("Unhandled " + eType + "in script");
    resultInfo.items.push({
        id: "",
        name: "",
        status: "failed",
        message: "Unhandled " + eType + "in script: " + unhandledErr,
        details: (typeof (unhandledErr.stack) == "undefined" || unhandledErr.stack === null) ? "" : ((typeof (unhandledErr.stack) == "string") ? unhandledErr.stack : unhandledErr.stack + "").trim()
    });
}
finally {
    var failed = resultInfo.items.filter(isFailedPluginActivation);
    var incomplete = resultInfo.items.filter(isQueuedPluginActivation);
    if (incomplete.length &gt; 0) {
        gs.warn("Alloted Activation Timeframe Expired");
        if (failed.length == 1)
            gs.error("1 error has occurred");
        else if (failed.length &gt; 1)
            gs.error(failed.length + " errors have occurred");
        gs.warn("Not all activation attempts completed before alotted timespan elapsed. Execute background script again to activate the remaining " +
            ((incomplete.length == 1) ? "plugin" : incomplete.length + " plugins"));
    }
    else if (failed.length &gt; 0) {
        gs.error("Activation Attempts Completed");
        if (failed.length == 1)
            gs.error("1 error has occurred");
        else if (failed.length &gt; 1)
            gs.error(failed.length + " errors have occurred");
    }
    else
        gs.error("Activations Completed");
    for (var index = 0; index &lt; resultInfo.items.length; index++) {
        var pluginInfo = resultInfo.items[index];
        var messageText = (typeof (pluginInfo.name) == "string" &amp;&amp; pluginInfo.name.trim().length &gt; 0 &amp;&amp; pluginInfo.name != pluginInfo.id) ?
            pluginInfo.name + " (" + pluginInfo.id + ")&lt;/em&gt;" : pluginInfo.id;
        if (typeof (pluginInfo.pluginLink) == "string" &amp;&amp; pluginInfo.pluginLink.trim().length &gt; 0)
            messageText += " [" + pluginInfo.pluginLink + "]";
        var detailsCode = "";
        var level = 1;
        if (isQueuedPluginActivation(pluginInfo))
            messageText += " Not Activated";
        else {
            if (isFailedPluginActivation(pluginInfo)) {
                level = 2;
                messageText += " Failed";
            }
            else {
                level = 0;
                messageText += " Activated";
            }
            if (typeof (pluginInfo.completion_code) == "string" &amp;&amp; pluginInfo.completion_code.length &gt; 0)
                messageText += "; Code: " + pluginInfo.completion_code;
            if (typeof (pluginInfo.message) == "string" &amp;&amp; pluginInfo.message.trim().length &gt; 0)
                messageText += "; Message: " + pluginInfo.message;
            if (typeof (pluginInfo.details) == "string" &amp;&amp; pluginInfo.details.trim().length &gt; 0)
                detailsCode = pluginInfo.details;
        }
        if (level == 0)
            gs.info(messageText);
        else if (level == 1)
            gs.warn(messageText);
        else
            gs.error(messageText);
        if (detailsCode.length &gt; 0) {
            if (level == 0)
                gs.info(detailsCode);
            else if (level == 1)
                gs.warn(detailsCode);
            else
                gs.error(detailsCode);
        }
    }
}]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_fix&lt;/sys_class_name&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-07-23 21:50:32&lt;/sys_created_on&gt;&lt;sys_id&gt;c4cf8a68dbe31300e298771ebf9619a3&lt;/sys_id&gt;&lt;sys_mod_count&gt;4&lt;/sys_mod_count&gt;&lt;sys_name&gt;Army Bulk Plugin Activation&lt;/sys_name&gt;&lt;sys_package display_value="Global" source="global"&gt;global&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_fix_c4cf8a68dbe31300e298771ebf9619a3&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;erwinel_da&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2019-04-09 17:15:42&lt;/sys_updated_on&gt;&lt;unloadable&gt;false&lt;/unloadable&gt;&lt;/sys_script_fix&gt;&lt;/record_update&gt;</payload>
<payload_hash>-1847121841</payload_hash>
<remote_update_set display_value="Initial Update Set 2018-04-09">90dcb57c0ff8b300d12eba8ce1050ea0</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>erwinel_da</sys_created_by>
<sys_created_on>2019-04-11 14:35:10</sys_created_on>
<sys_id>90dcb57c0ff8b300d12eba8ce1050ea1</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16a03192c7c0000001</sys_recorded_at>
<sys_updated_by>erwinel_da</sys_updated_by>
<sys_updated_on>2019-04-11 14:35:10</sys_updated_on>
<table/>
<target_name>Army Bulk Plugin Activation</target_name>
<type>Fix Script</type>
<update_domain>global</update_domain>
<update_guid>1c6e8c98c67c33006cc9b4258c001431</update_guid>
<update_guid_history>1c6e8c98c67c33006cc9b4258c001431:-1847121841,be4ec8980f7c33008097be4729b542bd:-1289151664,182de29b4ad42300db5865019bd6e3d0:-357706379,182de29b4ad42300db5865019bd6e3d0:-357706379,3fff4a2499e31300699efda057f3dd38:1705416391,9fef8a6871e3130034d294e60bc142a6:1743905096</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Global">global</application>
<category>customer</category>
<comments/>
<name>core_company_687625280f30b300d12eba8ce1050e65</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="core_company"><core_company action="INSERT_OR_UPDATE"><apple_icon/><banner_image/><banner_image_light/><banner_text/><city/><contact/><country>USA</country><customer>false</customer><discount/><fax_phone/><fiscal_year/><lat_long_error/><latitude/><longitude/><manufacturer>false</manufacturer><market_cap>0</market_cap><name>HQ</name><notes/><num_employees/><parent/><phone/><primary>false</primary><profits>0</profits><publicly_traded>false</publicly_traded><rank_tier/><revenue_per_year>0</revenue_per_year><state/><stock_price/><stock_symbol/><street/><sys_class_name>core_company</sys_class_name><sys_created_by>erwinel_da</sys_created_by><sys_created_on>2019-04-10 18:19:23</sys_created_on><sys_id>687625280f30b300d12eba8ce1050e65</sys_id><sys_mod_count>0</sys_mod_count><sys_updated_by>erwinel_da</sys_updated_by><sys_updated_on>2019-04-10 18:19:23</sys_updated_on><theme/><vendor>false</vendor><vendor_manager/><vendor_type/><website/><zip/></core_company></record_update>]]></payload>
<payload_hash>-1541469272</payload_hash>
<remote_update_set display_value="Initial Update Set 2018-04-09">90dcb57c0ff8b300d12eba8ce1050ea0</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>erwinel_da</sys_created_by>
<sys_created_on>2019-04-11 14:35:10</sys_created_on>
<sys_id>d4dcb57c0ff8b300d12eba8ce1050ea0</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16a087d2da60000001</sys_recorded_at>
<sys_updated_by>erwinel_da</sys_updated_by>
<sys_updated_on>2019-04-11 14:35:10</sys_updated_on>
<table/>
<target_name>HQ</target_name>
<type>Company</type>
<update_domain>global</update_domain>
<update_guid>a8676124c930b300e9f180ad452a658f</update_guid>
<update_guid_history>a8676124c930b300e9f180ad452a658f:-1541469272</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Global">global</application>
<category>customer</category>
<comments/>
<name>sys_script_fix_64638a60dbe31300e298771ebf96193a</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_fix"&gt;&lt;sys_script_fix action="INSERT_OR_UPDATE"&gt;&lt;active&gt;true&lt;/active&gt;&lt;before&gt;false&lt;/before&gt;&lt;description&gt;Performs initial configuration and UI modifications for SDLC stage of server.&lt;/description&gt;&lt;flush_cache&gt;false&lt;/flush_cache&gt;&lt;name&gt;Initial Army Config&lt;/name&gt;&lt;record_for_rollback&gt;false&lt;/record_for_rollback&gt;&lt;run_once&gt;true&lt;/run_once&gt;&lt;script&gt;&lt;![CDATA[// Following is an array of properties that will be configured by this script.
var sys_properties = [
	{ name: "glide.product.name", type: "string", description: "Browser tab title", sys_package: "apps/system2",
		prod: "ServiceNow Production", uat: "ServiceNow UAT", test: "ServiceNow Test", dev: "ServiceNow Dev", sb: "ServiceNow Sandbox" },
	{ name: "css.base.color", type: "color", description: "Banner and list caption background color", sys_package: "apps/system2",
		ootb: "#767676", prod: "#767676", uat: "#767676", test: "#767676", dev: "#767676", sb: "#767676" },
	{ name: "css.banner.description.color", type: "color", description: "Banner text color", sys_package: "glidesoft",
		ootb: "#AAAAAA", prod: "#aaaaaa", uat: "#aaaaaa", test: "#aaaaaa", dev: "#aaaaaa", sb: "#AAAAAA" },
	{ name: "css.$navpage-header-bg", type: "color", description: "Header Background Color", sys_package: "com.glide.ui.ui16",
		ootb: "#303a46", prod: "#651511", uat: "#111b65", test: "#115365", dev: "#376511", sb: "#303a46" },
	{ name: "css.$navpage-header-color", type: "color", description: "Header Background Color", sys_package: "com.glide.ui.ui16",
		ootb: "#ffffff", prod: "#ffffff", uat: "#ffffff", test: "#ffffff", dev: "#ffffff", sb: "#ffffff" },
	{ name: "css.$navpage-header-divider-color", type: "color", description: "Header divider stripe color", sys_package: "global",
		ootb: "#455464", prod: "#911a18", uat: "#182a91", test: "#187b91", dev: "#539118", sb: "#455464" },
	{ name: "css.$navpage-nav-bg", type: "color", description: "Navigation Header/Footer", sys_package: "com.glide.ui.ui16",
		ootb: "#303A46", prod: "#651511", uat: "#111b65", test: "#115365", dev: "#376511", sb: "#303A46" },
	{ name: "css.$subnav-background-color", type: "color", description: "Navigation background expanded items", sys_package: "com.glide.ui.ui16",
		ootb: "#303a46", prod: "#651511", uat: "#111b65", test: "#115365", dev: "#376511", sb: "#223d59" },
	{ name: "css.$navpage-nav-color-sub", type: "color", description: "Module text color for UI16\u003cbr/\u003eAlso affects unselected navigation tab icon and favorite icons color.", sys_package: "com.glide.ui.ui16",
		ootb: "#bec1c6", prod: "#f0bab2", uat: "#b2b5f0", test: "#b2def0", dev: "#caf0b2", sb: "#bec1c6" },
	{ name: "css.$navpage-nav-selected-bg", type: "color", description: "Navigation selected tab background color", sys_package: "com.glide.ui.ui16",
		ootb: "#4B545F", prod: "#90201a", uat: "#1a2890", test: "#1a7690", dev: "#4f901a", sb: "#4B545F" },
	{ name: "css.$nav-hr-color", type: "color", description: "Navigation separator color", sys_package: "com.glide.ui.ui16",
		ootb: "#303a46", prod: "#651511", uat: "#111b65", test: "#115365", dev: "#376511", sb: "#303a46" },
	{ name: "css.$navpage-nav-bg-sub", type: "color", description: "Background for navigator and sidebars", sys_package: "com.glide.ui.ui16",
		ootb: "#455464", prod: "#911a18", uat: "#182a91", test: "#187b91", dev: "#539118", sb: "#455464" },
	{ name: "css.$navpage-nav-unselected-color", type: "color", description: "Unselected navigation tab icon and favorite icons color", sys_package: "global",
		ootb: "#bec1c6", prod: "#eba399", uat: "#999ceb", test: "#99d3eb", dev: "#b8eb99", sb: "#bec1c6" },
	{ name: "css.$navpage-nav-selected-color", type: "color", description: "Currently selected Navigation tab icon color for UI16",
		ootb: "#ffffff", prod: "#ffffff", uat: "#ffffff", test: "#ffffff", dev: "#ffffff", sb: "#ffffff" },
	{ name: "css.$navpage-nav-border", type: "color", description: "Border color for UI16", sys_package: "com.glide.ui.ui16",
		ootb: "#ddd", prod: "#dddddd", uat: "#dddddd", test: "#dddddd", dev: "#dddddd", sb: "#ddd" },
	{ name: "css.$nav-highlight-main", type: "color", description: "Navigation highlight background color", sys_package: "com.glide.ui.ui16",
		ootb: "#3D4853", prod: "#7b1515", uat: "#15267b", test: "#156a7b", dev: "#487b15", sb: "#3D4853" },
	{ name: "css.$accent-color-dark", type: "color", description: "Color used for edge bookmarks and navigator favorites",
		ootb: "#3e95f4", prod: "#fb3b37", uat: "#3753fb", test: "#37d6fb", dev: "#95fb37", sb: "#3e95f4" },
	{ name: "glide.ui.module.highlight_color", type: "color", description: "Background color used to highlight selected when typing in the navigation filter",
		ootb: "#eeeeee", prod: "#eeeeee", uat: "#eeeeee", test: "#eeeeee", dev: "#eeeeee", sb: "#eeeeee" }
];
function getStageProperty(index, stage) {
    var p = sys_properties[index];
    switch (stage) {
        case "prod":
            return p.prod;
        case "uat":
            return p.uat;
        case "test":
            return p.test;
        case "dev":
            return p.dev;
    }
    return p.sb;
}
var stageName = gs.getProperty('x_44813_util.SN_SDLC_STAGE', '');
if (stageName.length == 0)
    gs.error("SDLC stage of current server not set. Cannot continue.");
else if (stageName !== "prod" &amp;&amp; stageName !== "uat" &amp;&amp; stageName !== "test" &amp;&amp; stageName !== "dev" &amp;&amp; stageName !== "sb")
    gs.error("SDLC stage of current server (" + JSON.stringify(stageName) + ") is invalid. This must be set to either \"prod\", \"uat\", \"test\", \"dev\", or \"sb\". Cannot continue.");
else {
    var sdlc_stage = stageName;
    var errorCount = 0;
    var updateCount = 0;
    for (var i = 0; i &lt; sys_properties.length; i++) {
        var settingsGr = new GlideRecord('sys_properties');
        settingsGr.addQuery('name', sys_properties[i].name);
        settingsGr.query();
        if (settingsGr.next()) {
            var oldValue = settingsGr.getValue('value');
            if (oldValue == getStageProperty(i, sdlc_stage))
                gs.info("Property " + sys_properties[i].name + " was already set to '" + getStageProperty(i, sdlc_stage) + "'");
            else {
                try {
                    settingsGr.setValue('value', getStageProperty(i, sdlc_stage));
                    settingsGr.update();
                    gs.info("Changed " + sys_properties[i].name + " from '" + oldValue + "' to '" + getStageProperty(i, sdlc_stage) + "'");
                    updateCount++;
                }
                catch (e) {
                    errorCount++;
                    gs.warn("Error changing " + sys_properties[i].name + " from '" + oldValue + "' to '" + getStageProperty(i, sdlc_stage) + "': " + e);
                }
            }
        }
        else {
            try {
                settingsGr.initialize();
                settingsGr.setValue('name', sys_properties[i].name);
                settingsGr.setValue('sys_name', sys_properties[i].name);
                settingsGr.setValue('description', sys_properties[i].description);
                settingsGr.setValue('type', sys_properties[i].type);
                settingsGr.setValue('ignore_cache', false);
                settingsGr.setValue('is_private', false);
                settingsGr.setValue('value', getStageProperty(i, sdlc_stage));
                var packageGr = new GlideRecord('sys_package');
                packageGr.addQuery('source', sys_properties[i].sys_package);
                packageGr.query();
                if (packageGr.next())
                    settingsGr.setValue('sys_package', packageGr.sys_id);
                settingsGr.insert();
                gs.info("Added " + sys_properties[i].name + " with the value of '" + getStageProperty(i, sdlc_stage) + "'");
                updateCount++;
            }
            catch (e) {
                errorCount++;
                gs.warn("Error adding " + sys_properties[i].name + " with the value of '" + getStageProperty(i, sdlc_stage) + "': " + e);
            }
        }
    }
    if (errorCount == 0)
        gs.info('There were no errors.');
    else if (errorCount == 1)
        gs.warn('1 error has occurred.');
    else
        gs.warn(errorCount + ' errors have occurred.');
    if (updateCount &gt; 0)
        gs.info("You may need to refresh your browser to see the changes.");
    else if (errorCount == 0)
        gs.info("No changes were required.");
}]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_fix&lt;/sys_class_name&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-07-23 21:03:34&lt;/sys_created_on&gt;&lt;sys_id&gt;64638a60dbe31300e298771ebf96193a&lt;/sys_id&gt;&lt;sys_mod_count&gt;4&lt;/sys_mod_count&gt;&lt;sys_name&gt;Initial Army Config&lt;/sys_name&gt;&lt;sys_package display_value="Global" source="global"&gt;global&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_fix_64638a60dbe31300e298771ebf96193a&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;erwinel_da&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2019-04-09 17:11:03&lt;/sys_updated_on&gt;&lt;unloadable&gt;false&lt;/unloadable&gt;&lt;/sys_script_fix&gt;&lt;/record_update&gt;</payload>
<payload_hash>808330887</payload_hash>
<remote_update_set display_value="Initial Update Set 2018-04-09">90dcb57c0ff8b300d12eba8ce1050ea0</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>erwinel_da</sys_created_by>
<sys_created_on>2019-04-11 14:35:10</sys_created_on>
<sys_id>dcdcb57c0ff8b300d12eba8ce1050ea0</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16a0314e9340000001</sys_recorded_at>
<sys_updated_by>erwinel_da</sys_updated_by>
<sys_updated_on>2019-04-11 14:35:10</sys_updated_on>
<table/>
<target_name>Initial Army Config</target_name>
<type>Fix Script</type>
<update_domain>global</update_domain>
<update_guid>1c5d8458447c3300c7c5b2902661b2cc</update_guid>
<update_guid_history>1c5d8458447c3300c7c5b2902661b2cc:808330887,c08a38f54bd833003dc09bf157d6a2f3:-18029373,c08a38f54bd833003dc09bf157d6a2f3:-18029373,4828e29709d423003e80c0e3531e1cca:2093697041,269f4a240ce31300c9e329eafa2b7822:-747236912,0325caa038e31300f1a956a1ef08ed5c:-1010469965</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
</unload>
